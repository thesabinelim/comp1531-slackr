# COMP1531 Project channels
# Written by Sabine Lim z5242579
# 01/10/19

from db import db_create_channel, db_get_channel_by_channel_id, db_get_user_by_u_id, db_get_all_channels
from auth import validate_token
from server import get_data

# Return list of channels (and their details) that user is in.
def channels_list(token):
    try:
        u_id, token_valid = validate_token(token)
    except ValueError:
        raise ValueError("Token was not generated by server!")
    if not token_valid:
        raise ValueError("Token is invalid!")
    user = db_get_user_by_u_id(u_id)
    channels = user.get_channels()
    dict_list = get_channel_list_info(channels)
    return {
        'channels': dict_list
    }

# Return list of channels (and their details).
def channels_listall(token):
    try:
        token_valid = validate_token(token)['is_valid']
    except ValueError:
        raise ValueError("Token was not generated by server!")
    if not token_valid:
        raise ValueError("Token is invalid!")
    channels = db_get_all_channels()
    dict_list = get_channel_list_info(channels)
    return {
        'channels': dict_list
    }

# Helper function to return a list of dictionaries containing the channel_id,
# and name of each channel within the supplied 'channel_ids' list.
def get_channel_list_info(channel_ids):
    dict_list = []
    for channel_id in channel_ids:
        channel = db_get_channel_by_channel_id(channel_id)
        dict_list.append({
            'channel_id': channel_id,
            'name': channel.get_name()
        })
    return dict_list

# Create new channel with that name that is either a public or private channel.
# Return dictionary containing channel_id.
# Raise ValueError exception if name > 20 characters.
def channels_create(token, name, is_public):
    if len(name) > 20:
        raise ValueError

    try:
        u_id, token_valid = validate_token(token)
    except ValueError:
        raise ValueError

    if not token_valid:
        return

    channel_id = db_create_channel(name, is_public)
    channel = db_get_channel_by_channel_id(channel_id)

    channel.add_member(u_id)
    channel.add_owner(u_id)

    return {'channel_id': channel_id}
