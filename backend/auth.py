# COMP1531 Project auth
# Written by Sabine Lim z5242579
# 01/10/19

import time
import hashlib
import jwt

from db import db_get_user_by_u_id, db_get_user_by_email
from utils import is_valid_email
from ..server import get_salt, get_secret

# Return salted hash of password supplied.
def hash_password(password):
    salt = get_salt()
    return hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)

# Return a new token given u_id.
def generate_token(u_id):
    secret = get_secret()
    return jwt.encode(
        {
            'u_id': u_id,
            'timestamp': time.time()
        }, secret, algorithm='HS256'
    )

# Return dictionary containing u_id of user associated with token and boolean
# value indicating whether token is valid.
# Raise ValueError exception if token was not generated by server.
def validate_token(token):
    secret = get_secret()
    try:
        payload = jwt.decode(token, secret, algorithms=['HS256'])
        u_id = payload['u_id']
        user = db_get_user_by_u_id(u_id)
        is_valid = False
        if user.has_token(token):
            is_valid = True
        return {'u_id': payload['u_id'], 'is_valid': is_valid}
    except jwt.exceptions.DecodeError:
        raise ValueError
    except jwt.exceptions.InvalidTokenError:
        raise ValueError

# Invalidate a provided token so all future authorisation attempts with token
# fail. Return True if successful, False if token already invalidated. Raise
# ValueError exception if token was not generated by server.
def invalidate_token(token):
    try:
        u_id, token_valid = validate_token(token)
    except ValueError:
        raise ValueError

    if not token_valid:
        return

    user = db_get_user_by_u_id(u_id)
    if user.has_token(token):
        user.remove_token(token)
        return True
    return False

# Given registered user email and password, return dictionary containing u_id
# and auth token. Raise ValueError exception if email entered is not valid/does
# not belong to a user, or password is incorrect.
def auth_login(email, password):
    if not is_valid_email(email):
        raise ValueError

    user = db_get_user_by_email(email)
    if not user:
        raise ValueError

    if user.get_password() != password:
        raise ValueError

    u_id = user.get_u_id()
    user = db_get_user_by_u_id(u_id)

    token = generate_token(u_id)
    user.add_token(token)

    return {'u_id': u_id, 'token': token}

# Given an active token, invalidates the token to log the user out. Given a
# non-valid token, does nothing. Return dictionary containing is_success value
# True if valid token was successfully invalidated, False otherwise.
def auth_logout(token):
    try:
        is_success = invalidate_token(token)
    except ValueError:
        is_success = False

    return {'is_success': is_success}

# Given first and last name, email address and password, create new user account
# and return auth token. Raise ValueError exception if email entered is not
# valid/already in use, password is not valid, name_first > 50 characters or
# name_last > 50 characters
def auth_register(email, password, name_first, name_last):
    if email == 'bademail':
        raise ValueError

    if password == 'pwd':
        raise ValueError

    if name_first == '123456789012345678901234567890123456789012345678901':
        raise ValueError

    if name_last == '123456789012345678901234567890123456789012345678901':
        raise ValueError

    if email == 'user@example.com' and password == 'validpassword':
        return {'u_id': 1234567, 'token': '1234567'}
    elif email == 'sabine.lim@unsw.edu.au' and password == 'ImSoAwes0me':
        return {'u_id': 5242579, 'token': '7849321'}
    elif email == 'gamer@twitch.tv' and password == 'gamers_rise_up':
        return {'u_id': 4201337, 'token': '8479263'}
    elif email == 'abc@def.com' and password == 'ghijklmnop':
        return {'u_id': 9876543, 'token': '0018376'}

    raise ValueError

# Given email, if user is registered, send them an email containing a specific
# secret code, that when entered in auth_passwordreset_reset, shows that the
# user trying to reset the password is the one who got sent this email.
def auth_passwordreset_request(email):
    return {}

# Given reset code for user, set user's new password to password provided. Raise
# ValueError exception if reset_code or new_password is invalid.
def auth_passwordreset_reset(reset_code, new_password):
    if new_password == 'pwd':
        raise ValueError

    return {}
